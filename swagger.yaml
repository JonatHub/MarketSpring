openapi: 3.0.1
info:
  title: Mi Marketplace
  version: 1.0.0
servers:
- url: /
paths:
  /productos:
    get:
      summary: Listar productos
      description: Lista los productos disponibles en el marketplace
      parameters:
      - name: limit
        in: query
        description: Límite de resultados por página (default 10, máximo 50)
        schema:
          maximum: 50
          minimum: 1
          type: integer
      - name: offset
        in: query
        description: Número de resultados a saltar (default 0)
        schema:
          minimum: 0
          type: integer
      responses:
        200:
          $ref: '#/components/schemas/ListaProductos'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Crear un nuevo producto
      description: Crea un nuevo producto en el marketplace
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ProductoInput'
        required: true
      responses:
        201:
          description: Producto creado exitosamente
          content: {}
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
      x-codegen-request-body-name: null
  /productos/{producto_id}:
    get:
      summary: Obtener un producto por ID
      description: Obtiene la información de un producto en particular
      parameters:
      - name: producto_id
        in: path
        description: ID del producto a obtener
        required: true
        schema: {}
      responses:
        200:
          description: Información del producto solicitado
          content: {}
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: Actualizar un producto por ID
      description: Actualiza la información de un producto en particular
      parameters:
      - name: producto_id
        in: path
        description: ID del producto a actualizar
        required: true
        schema: {}
      responses:
        200:
          description: Producto actualizado exitosamente
          content: {}
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /productos/{id}:
    delete:
      summary: Eliminar un producto por ID
      description: Elimina un producto existente por su ID.
      parameters:
      - name: id
        in: path
        description: ID del producto a eliminar.
        required: true
        schema: {}
      responses:
        204:
          description: El producto se eliminó con éxito.
          content: {}
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    Producto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identificador único del producto
        nombre:
          type: string
          description: Nombre del producto
        descripcion:
          type: string
          description: Descripción detallada del producto
        precio:
          type: number
          format: float
          description: Precio del producto
        imagen:
          type: string
          format: url
          description: URL de la imagen del producto
        cantidad_disponible:
          type: integer
          format: int32
          description: Cantidad de unidades disponibles del producto
      required:
        - id
        - nombre
        - descripcion
        - precio
        - cantidad_disponible
    ListaProductos:
      type: object
      required:
        - productos
      properties:
        productos:
          type: array
          items:
            $ref: "#/components/schemas/Producto"
          description: Lista de productos
        
    ProductoInput:
      type: object
      properties:
        nombre:
          type: string
          example: "Bicicleta de montaña"
        descripcion:
          type: string
          example: "Una bicicleta de montaña de alta calidad."
        categoria:
          type: string
          example: "Deportes y ocio"
        precio:
          type: number
          format: float
          example: 899.99
        vendedor:
          type: string
          example: "Juan Pérez"
        imagen:
          type: string
          example: "https://example.com/bicicleta.jpg"
      required:
        - nombre
        - descripcion
        - categoria
        - precio
        - vendedor
        
    Compra:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identificador único de la compra
        producto:
          $ref: "#/components/schemas/Producto"
          description: Producto comprado
        cantidad:
          type: integer
          format: int32
          description: Cantidad de unidades compradas
        fecha:
          type: string
          format: date-time
          description: Fecha y hora de la compra
      required:
        - id
        - producto
        - cantidad
        - fecha
  
    Usuario:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Identificador único del usuario
        nombre:
          type: string
          description: Nombre completo del usuario
        correo:
          type: string
          format: email
          description: Correo electrónico del usuario
        direccion:
          type: string
          description: Dirección de envío del usuario
        telefono:
          type: string
          description: Número de teléfono del usuario
      required:
        - id
        - nombre
        - correo
        - direccion
    Error:
      type: object
      properties:
        code:
          type: string
          example: "E001"
        message:
          type: string
          example: "Error interno del servidor"
      required:
        - code
        - message
  responses:
    Error:
      description: Error response
      #required: 
      #  - code
      #  - message
      #properties:
      #  code:
      #    type: string
      #    description: Codigo de error
      #  message:
      #    type: string
      #    description: Descripción del error
    UnauthorizedError:
      description: Unauthorized Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFoundError:
      description: Not Found Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequestError:
      description: La solicitud no se puede procesar debido a que es inválida o está mal formada.
    InternalServerError:
      description: Error interno del servidor
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'



